#!/usr/bin/env python3

import os
import re
import subprocess
from enum import Enum, auto


PATH = os.path.abspath("fixtures")


class ParseError(Exception):

	def __init__(self, message):
		self.message = message

	def __str__(self):
		return self.message


class Effect(Enum):
	RETURN = auto()
	SIGFPE = auto()
	SIGALRM = auto()
	ERROR = auto()


def parse_test_directive(f):
	line = f.readline()

	match = re.match("//\s*test return (-?\d+)\s*", line)
	if match:
		arg = match.group(1)
		return (Effect.RETURN, int(arg))

	match = re.match("//\s*test div-by-zero\s*", line)
	if match:
		return (Effect.SIGFPE, None)

	match = re.match("//\s*test infloop\s*", line)
	if match:
		return (Effect.SIGALRM, None)

	match = re.match("//\s*test error\s*", line)
	if match:
		return (Effect.ERROR, None)

	fn = os.path.basename(f.name)
	raise ParseError("Missing test directive in `%s`" % fn)


def run(fp, effect, result):
	fn = os.path.basename(fp)
	r = subprocess.run(["bin/c0c", fp], capture_output=True)

	if effect == Effect.ERROR:
		assert r.returncode == 1, "Invalid file compiled: `%s`" % fn
		return

	assert r.returncode == 0, "Valid file not compiled: `%s`" % fn
	r = link_and_execute(r.stdout, fn)

	if effect == Effect.RETURN:
		output = int(r.stdout.strip())
		assert output == result, "Invalid result(%s != %d) in: `%s`" % (output, result, fn)

	if effect == Effect.SIGFPE:
		assert r.returncode == -8, "SIGFPE not raised in: `%s`" % fn

	if effect == Effect.SIGALRM:
		assert r.returncode == -14, "SIGALRM not raised in: `%s`" % fn


def link_and_execute(asm, fn):
	write(asm, "out.s")
	r = subprocess.run(["gcc", "-m64", "out.s", "runtime/l1rt.c"], capture_output=True)
	assert r.returncode == 0, "Valid file not linked: `%s`" % fn
	return subprocess.run(["./a.out"], capture_output=True)


def write(txt, fn):
	with open(fn, 'wb') as f:
		f.write(txt)


def remove(fn):
	if os.path.exists(fn):
		os.remove(fn)


def main(path):
	for fn in os.listdir(path):
		fp = os.path.join(path, fn)

		with open(fp, 'r') as f:
			effect, result = parse_test_directive(f)
			try:
				run(fp, effect, result)
			except (ParseError, AssertionError) as e:
				print(e)
			finally:
				remove("out.s")
				remove("a.out")


main(PATH)
